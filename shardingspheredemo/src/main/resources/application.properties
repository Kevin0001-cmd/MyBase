# 应用服务 WEB 访问端口
server.port=8080
#spring.datasource.driver-class-name=org.apache.shardingsphere.driver.ShardingSphereDriver
#spring.datasource.url=jdbc:shardingsphere:classpath:shardingsphere.yaml
#控制是否允许bean定义覆盖
spring.main.allow-bean-definition-overriding=true
# 定义两个全局数据源
spring.shardingsphere.datasource.names=ds-0,ds-1
# 配置数据源 ds-0
spring.shardingsphere.datasource.ds-0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds-0.driverClassName=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds-0.jdbc-url=jdbc:mysql://127.0.0.1:3306/ds-0?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.ds-0.username=root
spring.shardingsphere.datasource.ds-0.password=12344
# 配置数据源 ds-1
spring.shardingsphere.datasource.ds-1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds-1.driverClassName=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds-1.jdbc-url=jdbc:mysql://127.0.0.1:3306/ds-1?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.ds-1.username=root
spring.shardingsphere.datasource.ds-1.password=12344

# 自增主键字段
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
# 自增主键ID 生成方案
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
#雪花算法的一个可选参数
#spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker-id=1


# 配置分片表 t_order
# 指定真实数据节点
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds-$->{0..1}.t_order_$->{0..2}
### 分库策略
# 分库分片健
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=order_id
# 分库分片算法
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds-$->{order_id % 2}
# 分表策略
# 分表分片健
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
# 分表算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 3}


# 绑定表关系
spring.shardingsphere.sharding.binding-tables=t_order,t_order_item
# 配置广播表
spring.shardingsphere.sharding.broadcast-tables=t_config
# 是否开启 SQL解析日志
spring.shardingsphere.props.sql.show=true
#指定xml文件位置
mybatis.mapper-locations=classpath:mapper/*.xml
#指定实体类位置，指定后可以在xml文件中直接使用类名，如User
mybatis.type-aliases-package=com.zkf.shardingspheredemo.demos.model
#用于指定日志实现的类全名,可以自定义MyBatis使用哪种日志框架来记录日志信息。
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
# 配置分片表 t_order_item

# 自增主键字段
spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=item_id
# 自增主键ID 生成方案
spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
#雪花算法的一个可选参数
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.props.worker-id=1
# 指定真实数据节点
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds-$->{0..1}.t_order_item_$->{0..2}
### 分库策略
# 分库分片健
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.sharding-column=item_id
# 分库分片算法
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.algorithm-expression=ds-$->{item_id % 2}
# 分表策略
# 分表分片健
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=item_id
# 分表算法
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item_$->{item_id % 3}

